box: combient/java-mvn
build:
  steps:
    # Build Spring Boot Sample application
    - script:
        name: Maven install
        code: mvn install
    - script:
        name: config
        code: |
          export KUBERNETES_VERSION="1.12.7"
          export KUBERNETES_SHA512="e2791a7797d05b6e2885d990364b04fdf39bccda3b092d32e783eb3f60658229adce47dfdbb3480f1d50146eb386bff02d1118179f54e220c31586a123a95eff"
          echo "Installing version $KUBERNETES_VERSION of kubernetes"
push:
  steps:
    # Push to public docker repo
    - internal/docker-push:
        username: $REGISTRY_USERNAME
        password: $REGISTRY_PASSWORD
        tag: $WERCKER_GIT_COMMIT
        repository: $REGISTRY_REPOSITORY
        registry: https://phx.ocir.io/v2
        cmd: java -jar  /pipeline/source/target/springbootdemo-0.0.1.war

deploy-accs:
  steps:
    # Deploy to Oracle Application Container Cloud
    - peternagy/oracle-accs-deploy@1.0.1:
        opc_user: $OPC_USERNAME
        opc_password: $OPC_PASSWORD
        rest_url: $REST_URL
        domain: $IDENTITY_DOMAIN
        application_name: springboot-accs-demo
        application_type: java
        file: springbootdemo-0.0.1.zip

deploy-to-oracle-bm:
  steps:
  
      # https://github.com/wercker/step-bash-template
    # This Wercker step will look for files in our repo with a .template extension.
    # It will expand any environment variables in those files, then remove the
    # template extension.
    - bash-template

    # The step above should leave us with a Kubernetes service and deployment yml files.
    # We'll create a directory to move them to.

    - script:
        name: Prepare Kubernetes files
        code: |
          mkdir $WERCKER_OUTPUT_DIR/kubernetes
          mv deploy-bmcs*.yml $WERCKER_OUTPUT_DIR/kubernetes

    # The step above should push service and deployment to K8S cluster.
    # Execute yml filecreated in kubernetes directory
    # changing this command: apply -f /pipeline/source/deploy-bmcs-k8s.yml      
    - kubectl:
        name: deploy springboot app to Kubernetes
        server: $OKE_MASTER
        token: $OKE_TOKEN
        insecure-skip-tls-verify: true
        command: apply -f $WERCKER_OUTPUT_DIR/kubernetes/
        
